randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 20, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 25, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 25, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 25, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -1,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -0.2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -0.2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -5,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -10,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.5,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -5,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.1,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -5,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -5,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
randomSNPs      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
test2 <- F0BF1J.bootstrap.sequoia$PedigreePar %>% select(id, dam, LLRdam, sire, LLRsire) %>%  na.omit()
test2
# Call the cumulative dataframe that we will write to in the for loop below
df_total                 <- data.frame() # start dataframe
pedigree.table           <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(pedigree.table) <- c('id', 'dam', 'LLRdam', 'sire' , 'LLRsire') # names for comuns in the for loop
# Call the cumulative dataframe that we will write to in the for loop below
df_total                 <- data.frame() # start dataframe
pedigree.table           <- data.frame(matrix(nrow = 1, ncol = 6)) # create dataframe to save cumunalitively during for loop
colnames(pedigree.table) <- c('id', 'dam', 'LLRdam', 'sire' , 'LLRsire') # names for comuns in the for loop
for (i in 1:100) {
randomSNPs[i]      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs[i]]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
pedigree_data <- data.frame(F0BF1J.bootstrap.sequoia$PedigreePar %>% select(id, dam, LLRdam, sire, LLRsire) %>%  na.omit())
df_total      <- rbind(df_total,pedigree_data) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}
randomSNPs[[1]]      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
randomSNPs_[`1`]      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
randomSNPs_[1]      <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
randomSNPs_`1`  <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
randomSNPs_1  <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
randomSNPs  <- array(sample(c(sample(1:ncol(F0BF1J.matrix), 50, replace = TRUE))))
randomSNPs
for (i in 1:100) {
x <- (50+i) - i # assign i to 50, # randomSNPs == 50 - repeat 100 times (for loop)
randomSNPs  <- array(sample(c(sample(1:ncol(F0BF1J.matrix), x, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs[i]]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
pedigree_data <- data.frame(F0BF1J.bootstrap.sequoia$PedigreePar %>% select(id, dam, LLRdam, sire, LLRsire) %>%  na.omit())
df_total      <- rbind(df_total,pedigree_data) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}
# Call the cumulative dataframe that we will write to in the for loop below
df_total                 <- data.frame() # start dataframe
for (i in 1:100) {
x <- (50+i) - i # assign i to 50, # randomSNPs == 50 - repeat 100 times (for loop)
randomSNPs  <- array(sample(c(sample(1:ncol(F0BF1J.matrix), x, replace = TRUE))))
bootstrap_GenoM <- F0BF1J.matrix[,randomSNPs]
F0BF1J.bootstrap.sequoia <- sequoia(
GenoM = bootstrap_GenoM,
LifeHistData = F0BF1J.LifeHistData.editted, #F0BF1J.LifeHistData,
SeqList = NULL,
# most comp intensive, run everything
Module = "par",
Err = 1e-04,
# threshold for log 10 likelihood (LLR) between a proposed relationship versus unrelated
Tfilter = -2,
# minimum LLR required for acceptance of proposed relationship relative to the next most likely
Tassign = 0.2,
# MaxSibshipSize = 100,
# breeding system complexity
Complex = "full",
Herm = "A",
UseAge = "extra",
CalcLLR = TRUE
)
pedigree_data <- data.frame(F0BF1J.bootstrap.sequoia$PedigreePar %>% select(id, dam, LLRdam, sire, LLRsire) %>%  na.omit())
df_total      <- rbind(df_total,pedigree_data) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}
df_total
# were we able to capture at least one pedigree for each of the F1 offspring?
length(colnames(All.vcf@gt[,63:139])) # number of F1 juvniles in the vcf /genind/ genoM matrix
length(unique(df_total$id))
df_total
# get the est fit model
# The larger the absolute value of the LLR, the stronger the evidence for the preferred model
df_total$absLLRtotal <- abs(df_total$LLRdam) + abs(df_total$LLRsire)
df_total
df_total.byLLR  <- df_total[,.SD[which.max(absLLRtotal)],by=id]
df_total
df_total.byLLR <- df_total %>% group_by(id) %>% dplyr::top_n(1, absLLRtotal)
df_total.byLLR
df_total.byLLR
pedigree_data <- df_total
# get the est fit model
# The larger the absolute value of the LLR, the stronger the evidence for the preferred model
pedigree_data$absLLRtotal <- abs(pedigree_data$LLRdam) + abs(pedigree_data$LLRsire)
pedigree_data.byLRRtotal  <- pedigree_data %>%
group_by(id) %>%
dplyr::top_n(1, absLLRtotal)
pedigree_data.byLRRtotal
F0BF1J.pedigree           <- pedigree_data %>%
group_by(id) %>% # group by id - there are mutliple occurances of pedigree assign for ids!
dplyr::top_n(1, absLLRtotal) # take the best hit essentiall, highest LLR total
F0BF1J.pedigree           <- pedigree_data %>%
group_by(id) %>% # group by id - there are mutliple occurances of pedigree assign for ids!
dplyr::top_n(1, absLLRtotal) %>%  # take the best hit essentiall, highest LLR total
dplyr::select(id, dam, sire) # select the target columns for next sequoia run
F0BF1J.pedigree
# Pairs - dataframe with columns ID1 and ID2 containing all possible combinations
F0BF1J.Pairs_raw  <- data.frame(F0BF1J.ListIDs) %>%
dplyr::rename(ID1 = F0BF1J.ListIDs) %>% # rename
dplyr::mutate(ID2 = ID1) %>% # duplicate
tidyr::expand(ID1, ID2) %>% # get all possible ocmbinations
dplyr::mutate(AgeDif = case_when(
# ID1 and ID2 are F0 broodstock
(grepl("F0", ID1, ignore.case = TRUE) &
grepl("F0", ID2, ignore.case = TRUE)) ~ 0,
# ID1 and ID2 are F1 Juveniles
(!grepl("F0", ID1, ignore.case = TRUE) &
!grepl("F0", ID2, ignore.case = TRUE)) ~ 0,
# ID1  is F1 juvenile and ID2 is F0 broodstock
(!grepl("F0", ID1, ignore.case = TRUE) &
grepl("F0", ID2, ignore.case = TRUE)) ~ 1,
# IF1 is F0 broodstock and ID2 is F1 juvenile
(grepl("F0", ID1, ignore.case = TRUE) &
!grepl("F0", ID2, ignore.case = TRUE)) ~ -1,
))
F0BF1J.Pairs      <- F0BF1J.Pairs_raw[F0BF1J.Pairs_raw$ID1 != F0BF1J.Pairs_raw$ID2,]
#  RUN IT!
CalcPairLL(
Pairs = F0BF1J.Pairs,
GenoM = F0BF1J.matrix,
Pedigree = F0BF1J.pedigree,
LifeHistData = F0BF1J.LifeHistData.editted, # working on it
AgePrior = TRUE, # working on it
SeqList = NULL,
Complex = "full",
Herm = "A", # "A" (distinguish between dam and sire role, default if at least 1 individual with sex=4), or "B" (no distinction between dam and sire role).
Err = 1e-04,
ErrFlavour = "version2.9",
Tassign = 0.5,
Tfilter = -2,
quiet = FALSE,
Plot = TRUE
)
F0BF1J.pedigree
F0BF1J.matrix
F0BF1J.Pairs
F0BF1J.LifeHistData.editted
#  RUN IT!
CalcPairLL(
Pairs = F0BF1J.Pairs,
GenoM = F0BF1J.matrix,
Pedigree = F0BF1J.pedigree,
LifeHistData = F0BF1J.LifeHistData.editted, # working on it
AgePrior = TRUE, # working on it
SeqList = NULL,
Complex = "full",
Herm = "A", # "A" (distinguish between dam and sire role, default if at least 1 individual with sex=4), or "B" (no distinction between dam and sire role).
Err = 1e-04,
ErrFlavour = "version2.9",
Tassign = 0.5,
Tfilter = -2,
quiet = FALSE,
Plot = TRUE
)
class(F0BF1J.pedigree)
class(as.data.frame(F0BF1J.pedigree))
CalcPairLL(
Pairs = F0BF1J.Pairs,
GenoM = F0BF1J.matrix,
Pedigree = as.data.frame(F0BF1J.pedigree),
LifeHistData = F0BF1J.LifeHistData.editted, # working on it
AgePrior = TRUE, # working on it
SeqList = NULL,
Complex = "full",
Herm = "A", # "A" (distinguish between dam and sire role, default if at least 1 individual with sex=4), or "B" (no distinction between dam and sire role).
Err = 1e-04,
ErrFlavour = "version2.9",
Tassign = 0.5,
Tfilter = -2,
quiet = FALSE,
Plot = TRUE
)
# view cl names to know what to subset by
colnames(All.vcf@gt)
# F3 juveniles are 178:250
colnames(All.vcf@gt[,251:393]) # third generation of juveniles (offpsring of pH-specific parents, grandchildren of F1 pH parents, great graandchildren of F0)
# F3 juveniles are 178:250
colnames(All.vcf@gt[,251:393]) # third generation of juveniles (offpsring of pH-specific parents, grandchildren of F1 pH parents, great graandchildren of F0)
# view cl names to know what to subset by
colnames(All.vcf@gt)
# F3 juveniles are 178:250
colnames(All.vcf@gt[,251:392]) # third generation of juveniles (offpsring of pH-specific parents, grandchildren of F1 pH parents, great graandchildren of F0)
# view cl names to know what to subset by
colnames(All.vcf@gt)
# F1 broodstock 27:62
colnames(All.vcf@gt[,27:62])
# view cl names to know what to subset by
colnames(All.vcf@gt)
# F2 broodstock
colnames(All.vcf@gt[,140:177])
F0BF1JF1BF2J.vcf <- All.vcf[,c(1:26,63:139,178:250, 27:62])] # now 175 samples!
F0BF1JF1BF2J.vcf <- All.vcf[,c(1:26,63:139,178:250,27:62])] # now 175 samples!
