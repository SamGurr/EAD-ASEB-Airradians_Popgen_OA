# library(stackr) # devtools::install_github("thierrygosselin/stackr")
library(sequoia)
library(qqman)
install.packages('sequoia')
install.packages('qqman')
install.packages('vcf2ploidy')
# install.packages('vcf2ploidy')
library(vcf2ploidy) # https://github.com/dandewaters/VCF2Ploidy # use interactive shiny script to covert to colony
# library(stackr) # devtools::install_github("thierrygosselin/stackr")
library(sequoia)
library(qqman)
library(pegas)
install.packages('pegas')
library(pegas)
path = "output/lcWGS/angsd/F0_Broodstock_all_juveniles/"
BiocManager::install("Rsamtools")
library(Rsamtools) # BiocManager::install("Rsamtools")
?Rsamtools
packageDescription('Rsamtools')
?scanBcf
scanBcf
scanBcf(paste0(path,"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"))
(paste0(path,"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"))
fl <- system.file(path,
"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf",
package="Rsamtools",
mustWork=TRUE)
#knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/HPC_analysis") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_multigen_OA/HPC_analysis") # Sam's
#knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/HPC_analysis") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_multigen_OA/HPC_analysis") # Sam's
fl <- system.file(path,
"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf",
package="Rsamtools",
mustWork=TRUE)
scanBcf(paste0(path,"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"))
path = "output/lcWGS/angsd/F0_Broodstock_all_juveniles/"
scanBcf(paste0(path,"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"))
# INTERSECT: ALL f0 broodstock and f1 juveniles from Low and Moderate OA
F0B_F1JALL_intersect.vcf     <- read.vcfR(paste0(path,"F0F1_intersect.vcf.gz")) # 6,048 variants
path = "output/lcWGS/angsd/Merge_Intercept/F0Broodstock_F1Juveniles/"
# INTERSECT: ALL f0 broodstock and f1 juveniles from Low and Moderate OA
F0B_F1JALL_intersect.vcf     <- read.vcfR(paste0(path,"F0F1_intersect.vcf.gz")) # 6,048 variants
install.packages('vcfppR')
library(vcfppR)
vcftable(
paste0(path,
"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"),
region = "",
samples = "-",
vartype = "all",
format = "GT",
ids = NULL,
qual = 0,
pass = FALSE,
info = TRUE,
collapse = TRUE,
setid = FALSE,
mac = 0
)
vcftable(
paste0(path,
"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"),
region = "",
samples = "-",
vartype = "all",
format = "GT",
ids = NULL,
qual = 0,
pass = FALSE,
info = TRUE,
collapse = TRUE,
setid = FALSE,
mac = 0
)
bcftools?
scanBcf(paste0(path,"F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf"))
?bcftools
scanBcf("output/lcWGS/angsd/F0_Broodstock_all_juveniles/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
scanBcf("C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_multigen_OA/HPC_analysis/output/lcWGS/angsd/F0_Broodstock_all_juveniles/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
scanBcf("output/lcWGS/angsd/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
scanBcf("output/lcWGS/angsd/F0_Broodstock_all_juveniles/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
scanBcf("output/lcWGS/angsd/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
scanBcf("C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_multigen_OA/HPC_analysis/output/lcWGS/angsd/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
indexBcf("C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_multigen_OA/HPC_analysis/output/lcWGS/angsd/F0_OM_all_juveniles_doMaf1_minMaf0.05_majorminor4_minind321_minD5x1605_maxD20x6420minDind5_maxDind150_minq30_minmapQ.bcf")
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
#knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/HPC_analysis") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
library(vcfR)
library(hierfstat)
library(pcadapt)
library(adegenet)
library(pegas)
# install.packages('vcf2ploidy')
# library(vcf2ploidy) # https://github.com/dandewaters/VCF2Ploidy # use interactive shiny script to covert to colony
# library(stackr) # devtools::install_github("thierrygosselin/stackr")
library(sequoia)
library(qqman)
library(dplyr)
library(tidyr)
# library(pegas)
# library(LDlinkR)
# library(ldsep) # need a Seqinfo object  Airradians not registered in package
# library(updog) # need a Seqinfo object  Airradians not registered in package
# library(VariantAnnotation) # need a Seqinfo object  Airradians not registered in package
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"vcf/all_final.vcf.gz"))
getwd()
path = "output/Popgen/angsd/all/"
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"vcf/all_final.vcf.gz"))
#knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/HPC_analysis") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
getwd()
path = "output/Popgen/angsd/all/"
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"vcf/all_final.vcf.gz"))
all.bed    <- read.pcadapt(paste0(path,"plink/all_final.bed"), type = "bed") # 3897 variants
all.strata <- read.csv(paste0(path,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(Individual = gsub('*./','',Individual),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
broodstock.vcf    <- read.vcfR(paste0(path,"vcf/broodstock_final.vcf.gz"))
broodstock.bed    <- read.pcadapt(paste0(path,"plink/broodstock_final.bed"), type = "bed") # 3897 variants
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE) %>%
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE) %>%
```
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE) %>%
```
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE) %>%
```
paste0(path,"strata/broodstock_listIDs.csv")
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs"), sep =',', header=FALSE) %>%
```
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE) %>%
```
# Tidy the VCF
all_tidy <- all.vcf %>%
vcfR2tidy(verbose = FALSE)
broodstock_tidy <- broodstock.vcf %>%
vcfR2tidy(verbose = FALSE)
broodstock_tidy
all_tidy
# Read in the genlight
all_genlight <- all.vcf %>%
vcfR2genlight()
# example of the locus name CM084264.1_39013, these are chroosome positions
# whereas those starting with JAYE are not
# Keep only loci mapped to chromosomes:
# only chromosome accession IDs
loc_chrom_tbl <- tibble(locus = all_genlight@loc.names) %>%
extract(locus, "chrom", "CM0(\\d+)", remove = FALSE) %>%
extract(locus, "pos", "_(\\d+)", remove = FALSE) %>%
mutate(chrom = as.integer(chrom),
pos = as.integer(pos))
loc_chrom_tbl <- dplyr::filter(loc_chrom_tbl, !grepl("JAYEEO",locus)) %>%
dplyr::mutate(chrom_num =
case_when(chrom %in% 84264 ~ 1,
chrom %in% 84265 ~ 2,
chrom %in% 84266 ~ 3,
chrom %in% 84267 ~ 4,
chrom %in% 84268 ~ 5,
chrom %in% 84269 ~ 6,
chrom %in% 84270 ~ 7,
chrom %in% 84271 ~ 8,
chrom %in% 84272 ~ 9,
chrom %in% 84273 ~ 10,
chrom %in% 84274 ~ 11,
chrom %in% 84275 ~ 12,
chrom %in% 84276 ~ 13,
chrom %in% 84277 ~ 14,
chrom %in% 84278 ~ 15,
chrom %in% 84279 ~ 16
))
nrow(loc_chrom_tbl) # 3130 total SNP calls
chrom_loci <- loc_chrom_tbl %>%
filter(chrom_num < 20) %>%
pull(locus)
chroms <- loc_chrom_tbl %>%
filter(chrom_num < 20) %>%
mutate(chrom_name = substr(locus,1,10)) %>%
pull(chrom_name) %>%
unique()
# other contigs starting with accession delimiter JAYEE
loc_othercontigs_tbl <- tibble(locus = all_genlight@loc.names) %>%
extract(locus, "othercontigs", "JAYEEO(\\d+)", remove = FALSE) %>%
extract(locus, "pos", "_(\\d+)", remove = FALSE) %>%
mutate(othercontigs = as.integer(othercontigs),
pos = as.integer(pos))
loc_othercontigs_tbl <- dplyr::filter(loc_othercontigs_tbl, !grepl("CM0",locus))
nrow(loc_othercontigs_tbl) # 767 total SNP calls
loc_othercontigs_tbl
# Create the genotype matrix
all_gl_mat <- all_genlight %>%
as.matrix()
gl_chrom <- all_genlight[,chrom_loci]
all_gl_mat
gl_chrom
## F0 brood with all F1 juvneiles
all.diagnostic      <- pcadapt(all.bed, K = 20)
ggpubr::ggarrange(
plot(all.diagnostic, option = "screeplot"),
plot(all.diagnostic, option = "manhattan"))
all.res             <- pcadapt(all.bed, K = 6)
ggpubr::ggarrange(
plot(all.res, option = "screeplot"),
plot(all.res, option = "manhattan"))
clump4me <- function(data, LD.thr, LD.K, LD.minMaf, outputfilename) {
# For loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
outputfilename      <- data.frame()  # start dataframe
loop.table          <- data.frame(matrix(nrow = 1, ncol = 5)) # create dataframe, columns for the number of sampling days
colnames(loop.table)<-c('output_PC1', 'input_MinMaf', 'input_Window', 'input_Threshold', 'input_NumPCAs') # names for comuns in the for loop
LD.window_loop      <- seq(50,1000, by=50) # run the loop for CPM from 1 - 10 (counts per million)
LD.window_loop      <- data.frame(LD.window_loop)
for (i in 1:nrow(LD.window_loop)) {
LD.window <- LD.window_loop[i,1]
res       <- pcadapt(input = data,
K = LD.K,
LD.clumping = list(size = LD.window,
thr = LD.thr),
min.maf= LD.minMaf)
loop.table$input_MinMaf    = LD.minMaf
loop.table$input_Window    = LD.window
loop.table$input_Threshold = LD.thr
loop.table$input_NumPCAs   = LD.K
loop.table$output_PC1      = abs(mean(res$scores[,1]))
# df             <- data.frame(loop.table) # name dataframe for this singl e row
outputfilename <- rbind(outputfilename,loop.table) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
return(outputfilename)
}
clump4me <- function(data, LD.thr, LD.K, LD.minMaf, outputfilename) {
# For loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
outputfilename      <- data.frame()  # start dataframe
loop.table          <- data.frame(matrix(nrow = 1, ncol = 5)) # create dataframe, columns for the number of sampling days
colnames(loop.table)<-c('output_PC1', 'input_MinMaf', 'input_Window', 'input_Threshold', 'input_NumPCAs') # names for comuns in the for loop
LD.window_loop      <- seq(100,50100, by=1000) # run the loop for CPM from 1 - 10 (counts per million)
LD.window_loop      <- data.frame(LD.window_loop)
for (i in 1:nrow(LD.window_loop)) {
LD.window <- LD.window_loop[i,1]
res       <- pcadapt(input = data,
K = LD.K,
LD.clumping = list(size = LD.window,
thr = LD.thr),
min.maf= LD.minMaf)
loop.table$input_MinMaf    = LD.minMaf
loop.table$input_Window    = LD.window
loop.table$input_Threshold = LD.thr
loop.table$input_NumPCAs   = LD.K
loop.table$output_PC1      = abs(mean(res$scores[,1]))
# df             <- data.frame(loop.table) # name dataframe for this singl e row
outputfilename <- rbind(outputfilename,loop.table) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
return(outputfilename)
}
# *  run the bam file - sliding window 50 -1000 at settings
test <- as.data.frame(clump4me(data         = all.bed,
LD.thr         = 0.1, # r squares
LD.K           = 4, # number of PCAs
LD.minMaf      = 0.05, # minumum allele freq threshold (5% - =0.05, etc)
outputfilename = all_linkage))
library(RcppCNPy)
# library(pegas)
# library(LDlinkR)
# library(ldsep) # need a Seqinfo object  Airradians not registered in package
# library(updog) # need a Seqinfo object  Airradians not registered in package
# library(VariantAnnotation) # need a Seqinfo object  Airradians not registered in package
install.packages('RcppCNPy')
library(RcppCNPy)
library(ggfortify)
library(tidyverse)
library(ggrepel)
# pcangsd outputs .cov file
all_cov_quad <- as.matrix(read.table(paste0(basedir, "all_final_pcangsd.cov"), header = F))
# pcangsd outputs .cov file
all_cov_quad <- as.matrix(read.table(paste0(path, "all_final_pcangsd.cov"), header = F))
all_cov_quad
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE) %>%
# pcangsd outputs .cov file
broodstock_cov_quad <- as.matrix(read.table(paste0(path, "broodstock_final_pcangsd.cov"), header = F))
# pcangsd outputs .cov file
broodstock_cov_quad <- as.matrix(read.table(paste0(path, "broodstock_final_pcangsd.cov"), header = F))
# Now it will perform the PCA
run.pca <- eigen(all_cov_quad)
# Here is the information from your population: location and name of the samples
samplemat <- as.matrix(read.csv(paste0(path,"strata/all_final_listIDs.csv"), sep =',', header=FALSE))
samplemat
# Here is the information from your population: location and name of the samples
samplemat <- as.matrix(all.strata)
samplemat
colnames(samplemat) <- sampleheaders
sampleheaders <- c("sample_id", "Gen", "Treatment", "Gen_Treatment")
colnames(samplemat) <- sampleheaders
samplemat
# Extract the eigenvectors and turn them into a dataframe for plotting
eigenvectors = run.pca$vectors #extract eigenvectors
# Combining the information from the populations/samples
pca.vectors = as_tibble(cbind(samplemat, data.frame(eigenvectors)))
# You can edit this too
legend_title <- "Location"
# You can edit this too
legend_title <- "Gen"
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Gen, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create another PCA plot.
# In this version, every point (or as many as possible) will have the sample ID assigned to it.
# It's neat if you want to see where exactly each sample is placed.
labeled.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Gen, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) +
geom_label_repel(show.legend = FALSE) #+ scale_color_brewer(palette="Set1")
plot(labeled.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Gen_Treatment, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Treatment, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Gen_Treatment, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Gen, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, color = Treatment, shape = Gen_Treatment, label = sample_id)) +
geom_point() +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, color = Treatment, shape = Gen, label = sample_id)) +
geom_point() +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, color = Treatment, shape = Gen, label = sample_id)) +
geom_point(size=4) +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(simple.pca)
broodstock_run.pca <- eigen(broodstock_cov_quad)
broodstock_samplemat     <- as.matrix(broodstock.strata)
broodstock.strata
broodstock_samplemat     <- as.matrix(broodstock.strata)
broodstock.strata
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE)
broodstock_samplemat     <- as.matrix(broodstock.strata)
broodstock_sampleheaders <- c("sample_id", "Gen", "Treatment", "Gen_Treatment")
colnames(broodstock_samplemat) <- broodstock_sampleheaders
broodstock_sampleheaders <- c("sample_id", "Gen", "Treatment", "Gen_Treatment")
colnames(broodstock_samplemat) <- broodstock_sampleheaders
broodstock_samplemat     <- as.matrix(broodstock.strata)
broodstock_sampleheaders <- c("sample_id", "Gen", "Treatment", "Gen_Treatment")
colnames(broodstock_samplemat) <- broodstock_sampleheaders
broodstock_samplemat
broodstock.strata
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE)  %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(Individual = gsub('*./','',Individual),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl("pH75\\.",Individual) ~ "Moderate",
grepl("pH8\\.",Individual) ~ "Low"))
broodstock.strata
broodstock.strata <- read.csv(paste0(path,"strata/broodstock_listIDs.csv"), sep =',', header=FALSE)  %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(Individual = gsub('*./','',Individual),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl("pH75\\.",Individual) ~ "Moderate",
grepl("pH8\\.",Individual) ~ "Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
broodstock_samplemat     <- as.matrix(broodstock.strata)
broodstock_sampleheaders <- c("sample_id", "Gen", "Treatment", "Gen_Treatment")
colnames(broodstock_samplemat) <- broodstock_sampleheaders
broodstock_samplemat
broodstock_eigenvectors = broodstock_run.pca$vectors #extract eigenvectors
broodstock_eigenvectors = broodstock_run.pca$vectors #extract eigenvectors
broodstock_pca.vectors = as_tibble(cbind(broodstock_samplemat, data.frame(broodstock_eigenvectors)))
broodstock_simple.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2,
color = Treatment,
shape = Gen,
label = sample_id)) +
geom_point(size=4) +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usubroodstocky the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(broodstock_simple.pca)
broodstock_simple.pca = ggplot(data = broodstock_pca.vectors,
aes(x=X1, y=X2,
color = Treatment,
shape = Gen,
label = sample_id)) +
geom_point(size=4) +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usubroodstocky the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(broodstock_simple.pca)
# This will create another PCA plot.
# In this version, every point (or as many as possible) will have the sample ID assigned to it.
# It's neat if you want to see where exactly each sample is placed.
labeled.pca = ggplot(data = pca.vectors, aes(x=X1, y=X2, colour = Gen, label = sample_id)) +
geom_point() + labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) +
geom_label_repel(show.legend = FALSE) #+ scale_color_brewer(palette="Set1")
plot(labeled.pca)
broodstock_simple.pca = ggplot(data = broodstock_pca.vectors,
aes(x=X1, y=X2,
color = Treatment,
shape = Gen,
label = sample_id)) +
geom_point(size=4) +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usubroodstocky the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(broodstock_simple.pca)
broodstock_simple.pca = ggplot(data = broodstock_pca.vectors,
aes(x=X1, y=X2,
color = Treatment,
shape = Gen,
label = sample_id)) +
geom_point(size=4) +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usubroodstocky the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(broodstock_simple.pca)
