"out.7.phased.vcf.gz"), verbose = FALSE)
dna        <- ape::read.dna("C:/Users/samjg/Documents/Bioinformatics/refs/Airradians/GCF_041381155.1_Ai_NY_genomic.fna", format = "fasta")
?MakeAgePrior
# F0 are 1:26
# F1 juveniles are 63:139
colnames(vcf@gt)
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
#knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
getwd()
F1.Parentage <- read.csv(here::here(getwd().
F1.Parentage <- read.csv(here::here(getwd().
here::here(getwd().
here::here(getwd().
F1.Parentage <- read.csv(here::here(getwd(),
"RAnalysis/Data/Popgen/Parentages",
"F1_parentage,csv"), sep = ',', head = T)
here::here(getwd(),
"RAnalysis/Data/Popgen/Parentages",
"F1_parentage,csv"
here::here(getwd(),
"RAnalysis/Data/Popgen/Parentages",
"F1_parentage,csv"
F1.Parentage <- read.csv(here::here(getwd(),
"RAnalysis/Data/Popgen/Parentages",
"F1_parentage,csv"), sep = ',', head = T)
F1.Parentage <- read.csv("RAnalysis/Data/Popgen/Parentages/F1_parentage,csv", sep = ',', head = T)
F1.Parentage <- read.csv(past0(getwd(),"RAnalysis/Data/Popgen/Parentages/F1_parentage,csv"), sep = ',', head = T)
F1.Parentage <- read.csv(paste0(getwd(),"RAnalysis/Data/Popgen/Parentages/F1_parentage,csv"), sep = ',', head = T)
paste0(getwd(),"RAnalysis/Data/Popgen/Parentages/F1_parentage,csv")
F1.Parentage <- read.csv(paste0(getwd(),"RAnalysis/Data/Popgen/Parentages/F1_parentage.csv"), sep = ',', head = T)
F1.Parentage <- read.csv(paste0(getwd(),"RAnalysis/Data/Popgen/Parentages/F1_parentage.csv"), sep = ',', head = T)
paste0(getwd(),"RAnalysis/Data/Popgen/Parentages/F1_parentage.csv")
F1.Parentage <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F1_parentage.csv"), sep = ',', head = T)
F2.Parentage <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F2_parentage.csv"),
sep = ',',
head = T)
F3.Parentage <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F3_parentage.csv"),
sep = ',',
head = T)
All.vcf <- vcfR::read.vcfR(here::here(getwd(),
"RAnalysis",
"Data",
"Popgen",
"03_prune",
"out.7.phased.vcf.gz"), verbose = FALSE)
dna        <- ape::read.dna("C:/Users/samjg/Documents/Bioinformatics/refs/Airradians/GCF_041381155.1_Ai_NY_genomic.fna", format = "fasta")
dna_chroms <- (dna)[1:16]
dna_chroms
# subset for F10 and F1 juveniles
F1.Parentage.vcf <- vcf[,c(1:26,63:139)]
colnames(F1.Parentage.vcf@gt)
colnames(F1.Parentage.vcf@gt([2:length(F1.Parentage.vcf@gt)]))# sanity check, quantify
colnames(F1.Parentage.vcf@gt)# sanity check, quantify
F1.Parentage.vcf
F1.Parentage.vcf@gt
(ncol(F1.Parentage.vcf@gt)-1) == nrow(F1.Parentage)
nrow(F1.Parentage)
(ncol(F1.Parentage.vcf@gt)-1)
F1.Parentage.vcf@gt
colnames(F1.Parentage.vcf@gt) # sanity check, visual
# F0 are 1:26
F1.Parentage.vcf@gt[1:26]
# F0 are 1:26
F1.Parentage.vcf@gt[,1:26]
# F0 are 1:26
F1.Parentage.vcf@gt[,2:26]
# F1 juveniles are 63:139
colnames(vcf@gt)
# F0 are 2:26
F1.Parentage.vcf@gt[,2:26]
# F0 are 2:26
F1.Parentage.vcf@gt[2:26,]
# F0 are 2:26
F1.Parentage.vcf@gt[2:26]
F1.Parentage.vcf@gt
# F0 are 2:26
colnames(F1.Parentage.vcf@gt)[,2:26]
colnames(F1.Parentage.vcf@gt)
# F0 are 2:26
colnames(F1.Parentage.vcf@gt[,2:26])
gsub('*.adapter_','',All.vcf@gt
gsub('*.adapter_','',All.vcf@gt)
gsub('.*adapter_','',All.vcf@gt)
gsub('.*adapter_','',colnames(All.vcf@gt))
gsub('.*adapter_trim','',colnames(All.vcf@gt))
str_match(colnames(All.vcf@gt), "adapter_trim\\s*(.*?)\\s*[.]bam")
str_match(colnames(All.vcf@gt), "adapter_trim[,]\\s*(.*?)\\s*[.]bam")
str_match(colnames(All.vcf@gt), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")
colnames(All.vcf@gt[2:ncol(All.vcf)])
2:ncol(All.vcf)
2:ncol(All.vcf@gt)
colnames(All.vcf@gt[2:ncol(All.vcf@gt)])
All.vcf@gt[2:ncol(All.vcf@gt)]
All.vcf@gt[,2:ncol(All.vcf@gt)]
All.vcf@gt[2:ncol(All.vcf@gt),]
colnames(All.vcf@gt[2:ncol(All.vcf@gt)])
length(All.vcf@gt)
ncol(All.vcf@gt)
colnames(All.vcf@gt[2:ncol(All.vcf@gt)])
colnames(All.vcf@gt[2:ncol(All.vcf@gt)])
colnames(All.vcf@gt[2:3])
colnames(All.vcf@gt[,2:3])
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")
str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <-
str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <-  str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <- str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <- str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
list
list
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
(str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2])
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <- (str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2])
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
edit_ids_df <- as.dataframe(str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2])
edit_ids_df
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
edit_ids_df <- as.data.frame(str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2])
edit_ids_df
edit_ids_df[,1]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <- edit_ids_df[,1]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
edit_ids_df[,1]
All.vcf@gt
View(All.vcf@gt)
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
edit_ids_df <- str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
edit_ids_df
# F0 are 2:26
colnames(F1.Parentage.vcf@gt[,2:26])
# F1 juveniles are 63:139
colnames(vcf@gt)
# F0 are 2:26
colnames(F1.Parentage.vcf@gt[,2:26])
# F0 are 2:26
colnames(F1.Parentage.vcf@gt[,2:26])
# F1 juveniles are 63:139
colnames(vcf@gt)
# subset for F10 and F1 juveniles
# retaincolumn 1 'Format'
F1.Parentage.vcf <- vcf[,c(1:26,63:139)]
F1.Parentage.vcf
(ncol(F1.Parentage.vcf@gt)-1)
nrow(F1.Parentage)
(ncol(F1.Parentage.vcf@gt)-1)
F1.Parentage.vcf
# F0 are 2:26
colnames(F1.Parentage.vcf@gt[,2:26])
F1.Parentage
# F1 juveniles are 63:139
colnames(F1.Parentage.vcf@gt[,63:139])
# F0 are 2:26
colnames(All.vcf@gt[,2:26])
# F1 juveniles are 63:139
colnames(All.vcf@gt[,63:139])
# subset for F10 and F1 juveniles
# retaincolumn 1 'Format'
F1.Parentage.vcf <- vcf[,c(1:26,63:139)]
All.vcf@gt
colnames(All.vcf@gt)
# F1 broodstock are 27:62
colnames(All.vcf@gt[,27:62])
colnames(All.vcf@gt)
# F1 broodstock are 27:62
colnames(All.vcf@gt[,27:62])
vcf # 391 samples, 2,947 variants
colnames(All.vcf@gt)
# F2 juveniles are 178:250
colnames(All.vcf@gt[178:250])
# subset for F10 and F1 juveniles
# retaincolumn 1 'Format'
F2.Parentage.vcf <- vcf[,c(1,27:62,178:250)]
vcf # 391 samples, 2,947 variants
colnames(All.vcf@gt)
# subset for F10 and F1 juveniles
# retaincolumn 1 'Format'
F3.Parentage.vcf <- vcf[,c(1,140:176,251:392)]
F3.Parentage.vcf
F1.Parentage
?sequoia
?GetMaybeRel
# gff <- read.table("C:/Users/samjg/Documents/Bioinformatics/refs/Airradians/GCF_041381155.1_genomic.gff", sep="\t", quote="")
gff <- ape::read.gff("C:/Users/samjg/Documents/Bioinformatics/refs/Airradians/GCF_041381155.1_genomic.gff") %>%
dplyr::filter(type %in% 'exon') %>%  # to mimix the example
dplyr::filter(!grepl("NW_",seqid)) %>%
dplyr::mutate(attributes = paste0('NAME=',(gsub('.*;product=', '', attributes))),
seqid = case_when(seqid %in% 'NC_091134.1' ~ 'CM084264.1',
seqid %in% 'NC_091135.1' ~ 'CM084265.1',
seqid %in% 'NC_091136.1' ~ 'CM084266.1',
seqid %in% 'NC_091137.1' ~ 'CM084267.1',
seqid %in% 'NC_091138.1' ~ 'CM084268.1',
seqid %in% 'NC_091139.1' ~ 'CM084269.1',
seqid %in% 'NC_091140.1' ~ 'CM084270.1',
seqid %in% 'NC_091141.1' ~ 'CM084271.1',
seqid %in% 'NC_091142.1' ~ 'CM084272.1',
seqid %in% 'NC_091143.1' ~ 'CM084273.1',
seqid %in% 'NC_091144.1' ~ 'CM084274.1',
seqid %in% 'NC_091145.1' ~ 'CM084275.1',
seqid %in% 'NC_091146.1' ~ 'CM084276.1',
seqid %in% 'NC_091147.1' ~ 'CM084277.1',
seqid %in% 'NC_091148.1' ~ 'CM084278.1',
seqid %in% 'NC_091149.1' ~ 'CM084279.1'))
gff
chrom <- create.chromR(name="chr_1", vcf=vcf, seq=dna_chroms, ann=gff, verbose=FALSE)
chrom@vcf
plot(chrom)
chromoqc(chrom)
chrom <- create.chromR(name="chr_2", vcf=vcf, seq=dna_chroms, ann=gff, verbose=FALSE)
chrom@vcf
chrom <- create.chromR(name="chr_2", vcf=All.vcf, seq=dna_chroms, ann=gff, verbose=FALSE)
chrom
chrom <- create.chromR(name="CM084265.1", vcf=All.vcf, seq=dna_chroms, ann=gff, verbose=FALSE)
chrom@vcf
chrom
All.vcf@meta
dna        <- ape::read.dna("C:/Users/samjg/Documents/Bioinformatics/refs/Airradians/GCF_041381155.1_Ai_NY_genomic.fna",
format = "fasta")
dna_chroms <- (dna)[1:16]
names(dna_chroms) <- c('CM084264.1', 'CM084265.1', 'CM084266.1', 'CM084267.1',
'CM084268.1', 'CM084269.1', 'CM084270.1', 'CM084271.1',
'CM084272.1', 'CM084273.1', 'CM084274.1', 'CM084275.1',
'CM084276.1', 'CM084277.1', 'CM084278.1', 'CM084279.1')
dna_chroms
gff
chrom <- create.chromR(name="CM084265.1", vcf=All.vcf, seq=dna_chroms, ann=gff, verbose=FALSE)
All.vcf
All.vcf@gt
All.vcf@meta
All.vcf@meta[11]
All.vcf(All.vcf@meta[11])
All.vcf@meta[11](All.vcf)
All.vcf@meta[11]
All.vcf
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
#knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
library(tidyverse)
library(sequoia)
library(vcfR)
F1.Parentage <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F1_parentage.csv"),
sep = ',',
head = T)
F2.Parentage <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F2_parentage.csv"),
sep = ',',
head = T)
F3.Parentage <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F3_parentage.csv"),
sep = ',',
head = T)
?akcPairLL
?CalcPairLL
All.vcf <- vcfR::read.vcfR(here::here(getwd(),
"RAnalysis",
"Data",
"Popgen",
"03_prune",
"out.7.phased.vcf.gz"), verbose = FALSE)
?CheckGeno
CheckGeno(
GenoM = All.vcf,
quiet = FALSE, # print messages please
Plot  = TRUE  # get the plots
)
All.vcf
All.vcf_matrix <- as.matrix(All.vcf)
# genind
All.vcf_gen <- All.vcf %>% vcfR2genind()
All.vcf_matrix <- as.matrix(All.vcf_gen)
CheckGeno(
GenoM = All.vcf_matrix,
quiet = FALSE, # print messages please
Plot  = TRUE  # get the plots
)
CheckGeno(
GenoM = All.vcf_matrix,
quiet = FALSE, # print messages please
Plot  = TRUE,  # get the plots
Return = "GenoM",
Strict = TRUE
)
CheckGeno(
GenoM = All.vcf_matrix,
quiet = FALSE, # print messages please
Plot  = TRUE,  # get the plots
Return = "GenoM",
Strict = TRUE
)
# list of excluded SNPs and individuals using excl
CheckGeno(
GenoM = All.vcf_matrix,
quiet = FALSE, # print messages please
Plot  = TRUE,  # get the plots
Return = "excl",
Strict = TRUE
)
# cleaned genotype matrix using GenoM
CheckGeno(
GenoM = All.vcf_matrix,
quiet = TRUE, # print messages please
Plot  = FALSE,  # get the plots
Return = "GenoM",
Strict = TRUE
)
# list of excluded SNPs and individuals using excl
Excl <- CheckGeno(
GenoM = All.vcf_matrix,
quiet = FALSE, # print messages please
Plot  = TRUE,  # get the plots
Return = "excl",
Strict = TRUE
)
Excl
# list of excluded SNPs and individuals using excl
Excl <- CheckGeno(
GenoM = All.vcf_matrix,
# quiet = FALSE, # print messages please
# Plot  = TRUE,  # get the plots
Return = "excl"
# Strict = TRUE
)
Excl
names(Excl)
All.vcf_matrix
All.vcf_gen
?CheckGeno # about this call
GenoM.checked <- CheckGeno(All.vcf_matrix, Return="GenoM")
GenoM.checked
# cleaned genotype matrix using GenoM
GenoM.checked <- CheckGeno(
GenoM = All.vcf_matrix,
quiet = TRUE, # print messages please
Plot  = FALSE,  # get the plots
Return = "GenoM",
Strict = TRUE
)
GenoM.checked
# cleaned genotype matrix using GenoM
CheckGeno(All.vcf_matrix, Return="GenoM")
# cleaned genotype matrix using GenoM
GenoM.checked <- CheckGeno(All.vcf_matrix, Return="GenoM")
?CalcPairLL #pairwise relationship liklihoods
Pairwise_df <- as.data.frame(ncol = 4)
?as.data.frame
All.vcf@gt
All.vcf@gt[,2:length(colnames(All.vcf@gt))])
colnames(All.vcf@gt)
length(colnames(All.vcf@gt))
All.vcf@gt[,2:length(colnames(All.vcf@gt))]
All.vcf@gt[2:length(colnames(All.vcf@gt)),]
colnames(All.vcf@gt[2:length(colnames(All.vcf@gt))])
colnames(All.vcf@gt[,2:length(colnames(All.vcf@gt))])
All.vcf_listIDs <- colnames(All.vcf@gt[,2:length(colnames(All.vcf@gt))])
as.data.frame(All.vcf_listIDs, All.vcf_listIDs)
colnames(as.data.frame(All.vcf_listIDs, All.vcf_listIDs) )
as.data.frame(All.vcf_listIDs, All.vcf_listIDs)
colnames(data.frame(All.vcf_listIDs, All.vcf_listIDs))
colnames(data.frame(All.vcf_listIDs, All.vcf_listIDs)) %>%
dplyr::rename(All.vcf_listIDs = Ids)
colnames(data.frame(All.vcf_listIDs, All.vcf_listIDs)) %>%
dplyr::rename(Ids = All.vcf_listIDs)
colnames(data.frame(All.vcf_listIDs, All.vcf_listIDs)) %>%
rename(Ids = All.vcf_listIDs)
data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs)
data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs) %>%
dplyr::distinct()
data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs) %>%
dplyr::distinct(Ids, Ids_dup)
data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs)
data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs.1) %>%
dplyr::distinct(Ids, Ids_dup)
data <- data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs.1) %>%
group_by(Ids) %>%
summarise(Ids_dup = t(combn(coIds_dupl2, 2)))
data <- data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs.1) %>%
group_by(Ids) %>%
summarise(Ids_dup = t(combn(Ids_dupl2, 2)))
data <- data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs.1) %>%
group_by(Ids) %>%
summarise(Ids_dup = t(combn(Ids_dup, 2)))
data.frame(All.vcf_listIDs, All.vcf_listIDs) %>%
rename(Ids = All.vcf_listIDs,
Ids_dup = All.vcf_listIDs.1) %>%
group_by(Ids)
get_permutations <- function(df){
perm <- permutations(nrow(unique(df[,1])), 2, df$variables)
as.data.table(perm)
}
data <- data.frame(All.vcf_listIDs, All.vcf_listIDs)
ds <- data[, get_permutations(.SD), by = indices]
All.vcf_listIDs <- colnames(All.vcf@gt[,2:length(colnames(All.vcf@gt))])
All.vcf_listIDs
data.frame(All.vcf_listIDs) %>%
dplyr::rename(ID1 = All.vcf_listIDs) %>%
tidyr::expand(ID1)
All.vcf_listIDs
data.frame(All.vcf_listIDs)
data.frame(All.vcf_listIDs) %>%
dplyr::rename(ID1 = All.vcf_listIDs)
data.frame(All.vcf_listIDs) %>%
dplyr::rename(ID1 = All.vcf_listIDs) %>%
dplyr::mutate(ID2 = ID1) %>%
tidyr::expand(ID1, ID2)
All.vcf_IDs_df  <- data.frame(All.vcf_listIDs) %>%
dplyr::rename(ID1 = All.vcf_listIDs) %>%
dplyr::mutate(ID2 = ID1) %>%
tidyr::expand(ID1, ID2)
All.vcf_pairs  <- data.frame(All.vcf_listIDs) %>%
dplyr::rename(ID1 = All.vcf_listIDs) %>% # rename
dplyr::mutate(ID2 = ID1) %>% # duplicate
tidyr::expand(ID1, ID2) # get all possible ocmbinations
All.vcf_unique.pairs <- All.vcf_pairs[All.vcf_pairs$ID1 != All.vcf_pairs$ID2,]
All.vcf_unique.pairs
All.vcf_pairs_df   <- data.frame(All.vcf_listIDs) %>%
dplyr::rename(ID1 = All.vcf_listIDs) %>% # rename
dplyr::mutate(ID2 = ID1) %>% # duplicate
tidyr::expand(ID1, ID2) # get all possible ocmbinations
Pairwise_scallop <- All.vcf_pairs[All.vcf_pairs$ID1 != All.vcf_pairs$ID2,]
Pairwise_scallop <- All.vcf_pairs_df[All.vcf_pairs_df$ID1 != All.vcf_pairs_df$ID2,]
Pairwise_scallop <- All.vcf_pairs_df[All.vcf_pairs_df$ID1 != All.vcf_pairs_df$ID2,]
Pairwise_scallop
All.vcf@gt
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
edit_ids_df <- str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
edit_ids_df
#
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <- edit_ids_df[,1]
edit_ids_df[,1]
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
edit_ids_df <- str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2]
edit_ids_df
edit_ids_df[1]
edit_ids_df[1,]
# edit sample ids fown to generation-ID-treatment nu omitting adaptertrim and.bam
# now that column 1 All.vcf@gt is 'FORMAT' and must remain
edit_ids_df <- data.frame(str_match(colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]), "adapter_trim[.]\\s*(.*?)\\s*[.]bam")[,2])
edit_ids_df
edit_ids_df[1,]
edit_ids_df[,1]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
edit_ids_df[,1]
#
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)]) <- edit_ids_df[,1]
All.vcf@gt
typeof)All.vcf@gt)
typeof(All.vcf@gt)
All.vcf@gt
All.vcf@gt[,2:ncol(All.vcf@gt)]
All.vcf@gt
All.vcf@gt[,2:ncol(All.vcf@gt)]
typeof(All.vcf@gt)
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
names(All.vcf@gt[,2:ncol(All.vcf@gt)])
(All.vcf@gt[,2:ncol(All.vcf@gt)])
(All.vcf@gt[,2:ncol(All.vcf@gt)])[1]
(All.vcf@gt[,2:ncol(All.vcf@gt)])[,-1]
(All.vcf@gt[,2:ncol(All.vcf@gt)])[,1]
(All.vcf@gt[,2:ncol(All.vcf@gt)])[,-1]
colnames(All.vcf@gt[,2:ncol(All.vcf@gt)])
edit_ids_df[,1]
?CalcPairLL #pairwise relationship liklihoods
ID1
All.vcf_pairs_df$ID1
Pairwise_scallop
# Pedigree
Pedigree_scallop <-
Pedigree_scallop_F1 <- read.csv(paste0(getwd(),"/RAnalysis/Data/Popgen/Parentages/F1_parentage.csv"), sep = ',',  head = T)
Pedigree_scallop_F1
Pedigree_scallop_F1
