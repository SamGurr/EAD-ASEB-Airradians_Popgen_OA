"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo Data/Demo_output/bayeskat_map_test"
)
rm(list=ls())
rm(list=ls())
###################
# load packages ###
###################
library(Matrix)
library(MASS)
library(LaplacesDemon)
library(mvtnorm)
library(numDeriv)
library(minqa)
BayesKAT_MAP<-function(inputAddress_y,inputAddress_X,inputAddress_Z,prior_H1=0.5,output_address){
y=read.table(inputAddress_y)
X=read.table(inputAddress_X)
Z=read.table(inputAddress_Z)
y=as.matrix(y); X=as.matrix(X); Z=as.matrix(Z)
y=scale(y); X=scale(X)
prior1=as.numeric(prior_H1)
prior0=1-prior1
nsamp=dim(Z)[1]
np=dim(Z)[2]
if(prior_H1<=0 | prior_H1>=1 | !is.numeric(y) | !is.numeric(X) | !is.numeric(Z) | dim(y)[2]>1 | dim(X)[2]!=3 | !(dim(y)[1]==dim(X)[1]) | !(dim(y)[1]==dim(Z)[1]) | sum(Z< 0)>0 ){
if(prior_H1<0 | prior_H1>1){
print("prior_H1 is the prior probability of H1, should be between 0 and 1!")
}else if(prior_H1==0 | prior_H1==1){
print("If you already know what the true hypothesis is, there is no point of testing it!")
}else if(!is.numeric(y)| !is.numeric(X) | !is.numeric(y)){
print("Please make sure the input addresses are correct and the input data matrices are numeric.")
}else if(dim(y)[2]>1){
print("Please make sure the input data y follows the basic configuration given in the readme file")
}else if(dim(X)[2]!=3){
print("Please make sure the input data matrix X follow the basic configuration given in the readme file")
}else if(!(dim(y)[1]==dim(X)[1])| !(dim(y)[1]==dim(Z)[1])){
print("Please make sure the input data matrices contain information on same number of individuals")
}else if(!(dim(y)[1]==dim(X)[1])| !(dim(y)[1]==dim(Z)[1])){
print("Please make sure the input data matrices contain information on same number of individuals")
}else if(sum(Z<0)>0){
print("Please make sure the input data matrix Z follow the basic configuration given in the readme file")
}else{
print("Please check your input")
}
}else{
if(nsamp<100 & np>100){
print("Please note that the sample size is too small to have an accurate result!")
}
gen.ker <- function(covx,kernel.index){
#covx:X;
#kernel.index=c("Gau","Lin","Quad","IBS"): index of kernel function;
n <- nrow(covx)
p <- ncol(covx)
ker <- matrix(0,n,n)
for (i in 1:n)
for (j in i:n)
{
x <- covx[i,]
y <- covx[j,]
if (kernel.index=="Gau")
{
ker[i,j] <- exp(-sum((x-y)^2)/p) #gaussian kernel
}
if (kernel.index=="Lin")
{
ker[i,j] <- sum(x*y)  #linear kernel
}
if (kernel.index=="Quad")
{
ker[i,j]=(sum(x*y)+1)^2 # Quadratic kernel
}
if (kernel.index=="IBS")
{
ker[i,j] <- 1-sum(abs(x-y))/(2*p) #IBS kernel
}
}
ker <- as.matrix(forceSymmetric(ker))
ker0 <- ker
diag(ker0) <- rep(0,n)
J <- matrix(1,n,n)
ker.cen <- ker-J%*%ker0/(n-1)-ker0%*%J/(n-1)+J%*%ker0%*%J/n/(n-1)
v1.cen <- tr(ker.cen)/n
return(list(ker.cen=ker.cen,v1.cen=v1.cen))
}
k1=gen.ker(covx=Z,kernel.index="IBS")
gker1<- k1$ker.cen/k1$v1.cen
k2=gen.ker(covx=Z,kernel.index="Quad")
gker2<- k2$ker.cen/k2$v1.cen
k3=gen.ker(covx=Z,kernel.index="Gau")
gker3<- k3$ker.cen/k3$v1.cen
####MAP###################################################################################
id_mat<-diag(rep(1,nsamp))
post1<-function(val1){
s=sum(val1[1:3])
rho1=val1[1]/s
rho2=val1[2]/s
rho3=val1[3]/s
rho=c(rho1,rho2,rho3)
tau=val1[4]
sigsq=val1[5]
beta=val1[6:8]
Ker=rho[1]*gker1 + rho[2]*gker2 + rho[3]*gker3
V<-sigsq*(tau*Ker+id_mat)
mu1=X%*%beta
res=dmvnorm(c(y),c(mu1),V,log=TRUE)+dunif(tau, min = 0, max = 2, log = TRUE)+dinvgamma(sigsq, shape=2,scale=2, log =TRUE)+dmvnorm(beta, c(0,0,0),diag(c(10,10,10)), log =TRUE)+dgamma(val1[1],shape=1,log=TRUE)+dgamma(val1[2],shape=1,log=TRUE)+dgamma(val1[3],shape=1,log=TRUE)
res=ifelse(is.na(res),-1e+1000,res) #for V too close or equal to 0, it might return NaN and model might fail.
return(-res) #'-'ve because we'll be minimizing
}
inits<-c(1/3,1/3,1/3,0.5,1,0,0,0)
epsilon=1e-10
sigsq_lower=0.1
res=minqa::bobyqa(inits,post1,lower = c(epsilon,epsilon,epsilon,0,sigsq_lower,-1e+10,-1e+10,-1e+10),upper=c(100,100,100,2,100,1e+10,1e+10,1e+10),control=list(npt=12))
ress=res$par
s=sum(ress[1:3])
result1=c(ress[1:3]/s,ress[4:8])
tau=result1[4]
if(tau==0){
bf=0
}else{
#under H0
id_mat<-diag(rep(1,nsamp))
fn_post0<-function(val0){
sigsq=val0[1]
beta=val0[2:4]
V<-sigsq*id_mat
mu1=X%*%beta
res=dmvnorm(c(y),c(mu1),V,log=TRUE)+dinvgamma(sigsq, shape=2,scale=2, log =TRUE)+dmvnorm(beta,c(0,0,0),diag(c(10,10,10)), log =TRUE)
return(res)
}
inits=c(1,0,0,0)
res1=optim(inits,fn_post0,method="L-BFGS-B",control=list(fnscale=-1),lower = c(sigsq_lower,-1e+10,-1e+10,-1e+10),upper=c(100,1e+10,1e+10,1e+10),hessian=TRUE)
neg_hes=-res1$hessian
psi_hat=solve(neg_hes)
det_psi_hat=det(psi_hat)
log_post_hat=res1$value
lap01= ((2*pi)^(4/2))*sqrt(det_psi_hat)
lap02=log_post_hat
#under H1
Ker=result1[1]*gker1 + result1[2]*gker2 + result1[3]*gker3
id_mat<-diag(rep(1,nsamp))
fn_post1<-function(val1){
tau=val1[1]
sigsq=val1[2]
beta=val1[3:5]
V<-sigsq*(tau*Ker+id_mat)
mu1=X%*%beta
res=dmvnorm(c(y),c(mu1),V,log=TRUE)+dinvgamma(sigsq, shape=2,scale=2, log =TRUE)+dmvnorm(beta, c(0,0,0),diag(c(10,10,10)), log =TRUE)+dunif(tau,0,2,log=TRUE)
return(res)
}
val=result1[4:8]
h1=hessian(fn_post1,val)
if(sum(is.na(as.array(h1)))==0){  ##adding extra condition
neg_hes1=-h1
psi_hat1=solve(neg_hes1)
det_psi_hat1=det(psi_hat1)
sig_hat=result1[5]
tau_hat=result1[4]
log_post_hat1=fn_post1(val)
lap11= ((2*pi)^(5/2))*sqrt(det_psi_hat1)
lap12=log_post_hat1
#print(c(lap01,lap02,lap11,lap12))
bf=(exp(log(lap11))/exp(log(lap01)))*(exp(lap12-lap02))
}else{
fn_post1_B<-function(val1){
tau=val1[1]
sigsq=val1[2]
beta=val1[3:5]
V<-sigsq*(tau*Ker+id_mat)
mu1=X%*%beta
res=dmvnorm(c(y),c(mu1),V,log=TRUE)
return(res)
}
inits<-c(0.5,1,0,0,0)
epsilon=1e-10
sigsq_lower=0.1
res=optim(inits,fn_post1_B,method="L-BFGS-B",control=list(fnscale=-1),lower = c(0,sigsq_lower,-1e+10,-1e+10,-1e+10),upper=c(2,100,1e+10,1e+10,1e+10),hessian=TRUE)
ress=res$par
h1=res$hessian
neg_hes1=-h1
psi_hat1=solve(neg_hes1)
det_psi_hat1=det(psi_hat1)
res1=optim(inits,fn_post1_B,method="L-BFGS-B",control=list(fnscale=-1),lower = c(0.1,sigsq_lower,-1e+10,-1e+10,-1e+10),upper=c(1.9,100,1e+10,1e+10,1e+10),hessian=TRUE)
ress1=res1$par
extra_prob=pmvnorm(mean=ress, sigma =psi_hat1, lower=c(0.1,sigsq_lower,-1e+10,-1e+10,-1e+10), upper=c(1.9,100,1e+10,1e+10,1e+10), maxpts = 25000, abseps =0.001, releps = 0)
lap11= ((2*pi)^(5/2))*sqrt(det_psi_hat1)*extra_prob[1]
sigsq=ress1[2]
beta=ress1[3:5]
tau=ress1[1]
log_post_hat1=res$value+ dinvgamma(sigsq, shape=2,scale=2, log =TRUE)+dmvnorm(beta, c(0,0,0),diag(c(10,10,10)), log =TRUE)+dunif(tau,0,2,log=TRUE)
lap12=log_post_hat1
#bf=(lap11/lap01)*(exp(lap12-lap02))
bf=(exp(log(lap11))/exp(log(lap01)))*(exp(lap12-lap02))
}
}
kernel_weights=result1[1:3]
post_H1=1/(1+(prior0/prior1)*(1/bf))
result_final=c(post_H1,kernel_weights)
result_names=c("Post_H1","IBS_weight","Quadratic_weight","Gaussian_weight")
write.table(cbind(result_names,result_final),output_address)
return(list(Post_H1=post_H1,Kernel_Weights=kernel_weights))
}
}
BayesKAT_MAP(
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo Data/input_Y",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo Data/input_X",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo Data/input_Z",
prior_H1 =0.5,
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo Data/Demo_output/bayeskat_map_test"
)
BayesKAT_MAP(
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_Y",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_X",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_Z",
prior_H1 =0.5,
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/Demo_output/bayeskat_map_test"
)
BayesKAT_MAP(
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_y",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_X",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_Z",
prior_H1 =0.5,
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/Demo_output/bayeskat_map_test"
)
BayesKAT_MAP(
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_y.txt",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_X.txt",
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/input_Z.txt",
prior_H1 =0.5,
"C:/Users/samjg/Documents/Github_repositories/Bioinformatics_R_packages/BayesKAT/Demo_Data/Demo_output/bayeskat_map_test"
)
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
#knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
library(vcfR)
library(hierfstat)
library(pcadapt)
library(adegenet)
library(pegas)
# install.packages('vcf2ploidy')
# library(vcf2ploidy) # https://github.com/dandewaters/VCF2Ploidy # use interactive shiny script to covert to colony
# library(stackr) # devtools::install_github("thierrygosselin/stackr")
library(sequoia)
library(qqman)
library(dplyr)
library(tidyr)
# library(pegas)
# library(LDlinkR)
# library(ldsep) # need a Seqinfo object  Airradians not registered in package
# library(updog) # need a Seqinfo object  Airradians not registered in package
# library(VariantAnnotation) # need a Seqinfo object  Airradians not registered in package
library(RcppCNPy)
library(ggfortify)
library(tidyverse)
library(ggrepel)
getwd()
path = "output/Popgen/angsd/all/"
path = "output/Popgen/angsd/03_prune/"
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
getwd()
path = "output/Popgen/angsd/03_prune/"
path = "output/Popgen/03_prune/"
all.bed    <- read.pcadapt(paste0(path,"out.7.bed"), type = "bed") # 3897 variants
all.bed    <- read.pcadapt(paste0(path,"out.7.bed.bed"), type = "bed") # 3897 variants
all.vcf
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
getwd()
path = "output/Popgen/03_prune/"
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
path = "Data/Popgen/03_prune/"
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
# knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/RAnalysis/") # Sam's
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
all.bed    <- read.pcadapt(paste0(path,"out.7.bed"), type = "bed") # 3897 variants
all.strata <- read.csv(paste0(path,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(
Individual = gsub('*./','',Individual),
Type = dplyr::case_when(grepl("-B", Individual) ~ "broodstock", TRUE ~ 'juvenile'),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
all.vcf
all.vcf@gt
# knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
path2 = "HPC_abalysis/angsd/"
all.strata <- read.csv(paste0(path2,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(
Individual = gsub('*./','',Individual),
Type = dplyr::case_when(grepl("-B", Individual) ~ "broodstock", TRUE ~ 'juvenile'),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
# knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
path = "RAnalysis/Data/Popgen/03_prune/"
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
# Call the file with all samples - filtered using vcftools on SEDNA (check out the readme for what was done)
all.vcf    <- read.vcfR(paste0(path,"out.7.phased.vcf.gz"))
path2 = "HPC_abalysis/angsd/"
all.strata <- read.csv(paste0(path2,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(
Individual = gsub('*./','',Individual),
Type = dplyr::case_when(grepl("-B", Individual) ~ "broodstock", TRUE ~ 'juvenile'),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
# knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/HPC_analysis/") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
all.strata <- read.csv(paste0(path2,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(
Individual = gsub('*./','',Individual),
Type = dplyr::case_when(grepl("-B", Individual) ~ "broodstock", TRUE ~ 'juvenile'),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
path2 = "HPC_abalysis/angsd/"
paste0(path2,"strata/all_final_listIDs.csv")
path2 = "HPC_analysis/angsd/"
all.strata <- read.csv(paste0(path2,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(
Individual = gsub('*./','',Individual),
Type = dplyr::case_when(grepl("-B", Individual) ~ "broodstock", TRUE ~ 'juvenile'),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
path2 = "HPC_analysis/Popgen/angsd/"
all.strata <- read.csv(paste0(path2,"strata/all_final_listIDs.csv"), sep =',', header=FALSE) %>%
dplyr::rename(Individual = V1) %>%
dplyr::mutate(
Individual = gsub('*./','',Individual),
Type = dplyr::case_when(grepl("-B", Individual) ~ "broodstock", TRUE ~ 'juvenile'),
Gen = dplyr::case_when(grepl("F0", Individual) ~ "F0",
grepl("F1", Individual) ~ "F1",
grepl("F2", Individual) ~ "F2",
grepl("F3", Individual) ~ "F3",
TRUE ~ "F1"),
Treatment = dplyr::case_when(
grepl("F0", Individual) ~ "none",
grepl("pH7\\.",Individual) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), Individual) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), Individual) ~
"Low")) %>%
dplyr::mutate(Gen_Treatment =
dplyr::case_when(Gen == "F0" ~ "F0",
Gen %in% c("F1","F2","F3") ~ paste0(Gen,'_',Treatment)))
# pcangsd outputs .cov file
all_cov_quad <- as.matrix(read.table(paste0(path2, "plink/pcangsd/all_final.cov"), header = F))
# all samples
all_tidy <- all.vcf %>%
vcfR2tidy(verbose = FALSE)
# Read in the genlight
all_genlight <- all.vcf %>%
vcfR2genlight()
# example of the locus name CM084264.1_39013, these are chroosome positions
# whereas those starting with JAYE are not
# Keep only loci mapped to chromosomes:
# only chromosome accession IDs
loc_chrom_tbl <- tibble(locus = all_genlight@loc.names) %>%
extract(locus, "chrom", "CM0(\\d+)", remove = FALSE) %>%
extract(locus, "pos", "_(\\d+)", remove = FALSE) %>%
mutate(chrom = as.integer(chrom),
pos = as.integer(pos))
loc_chrom_tbl <- dplyr::filter(loc_chrom_tbl, !grepl("JAYEEO",locus)) %>%
dplyr::mutate(chrom_num =
case_when(chrom %in% 84264 ~ 1,
chrom %in% 84265 ~ 2,
chrom %in% 84266 ~ 3,
chrom %in% 84267 ~ 4,
chrom %in% 84268 ~ 5,
chrom %in% 84269 ~ 6,
chrom %in% 84270 ~ 7,
chrom %in% 84271 ~ 8,
chrom %in% 84272 ~ 9,
chrom %in% 84273 ~ 10,
chrom %in% 84274 ~ 11,
chrom %in% 84275 ~ 12,
chrom %in% 84276 ~ 13,
chrom %in% 84277 ~ 14,
chrom %in% 84278 ~ 15,
chrom %in% 84279 ~ 16
))
nrow(loc_chrom_tbl) # 3130 total SNP calls
chrom_loci <- loc_chrom_tbl %>%
filter(chrom_num < 20) %>%
pull(locus)
chroms <- loc_chrom_tbl %>%
filter(chrom_num < 20) %>%
mutate(chrom_name = substr(locus,1,10)) %>%
pull(chrom_name) %>%
unique()
# other contigs starting with accession delimiter JAYEE
loc_othercontigs_tbl <- tibble(locus = all_genlight@loc.names) %>%
extract(locus, "othercontigs", "JAYEEO(\\d+)", remove = FALSE) %>%
extract(locus, "pos", "_(\\d+)", remove = FALSE) %>%
mutate(othercontigs = as.integer(othercontigs),
pos = as.integer(pos))
loc_othercontigs_tbl <- dplyr::filter(loc_othercontigs_tbl, !grepl("CM0",locus))
nrow(loc_othercontigs_tbl) # 767 total SNP calls
# Create the genotype matrix
all_gl_mat <- all_genlight %>%
as.matrix()
gl_chrom <- all_genlight[,chrom_loci]
# all data
all_run.pca        <- eigen(all_cov_quad)
#chromosomes split data for all individuals
chrom1_run.pca         <- eigen(chrom1_cov_quad)
# Here is the information from your population: location and name of the samples
# note you can use the all samples strata for the chromosome split - its the same number of individuals
all_samplemat     <- as.matrix(all.strata)
all_sampleheaders <- c("sample_id", "Type", "Gen", "Treatment", "Gen_Treatment")
colnames(all_samplemat) <- all_sampleheaders
# Extract the eigenvectors and turn them into a dataframe for plotting
all_eigenvectors = all_run.pca$vectors #extract eigenvectors
all_eigenvectors
# Combining the information from the populations/samples
all_pca.vectors = as_tibble(cbind(all_samplemat, data.frame(all_eigenvectors)))
chrom1_pca.vectors = as_tibble(cbind(all_samplemat, data.frame(chrom1_eigenvectors))) %>% dplyr::mutate(chrom_num = 1)
all_samplemat
# This will create a "simple" PCA plot. It will have a legend with the location of the samples next to it.
# Adjust the title, of course.
# Please notice that I commented the RColorBrewer.
# Uncomment and use the palette your like the most if you want to change the colors.
# Don't forget to uncomment the library in in the beginning of the script too.
all_simple.pca = ggplot(data = all_pca.vectors,
aes(x=X1, y=X2,
color = Treatment,
shape = Gen,
label = sample_id)) +
geom_point(size=4) +
labs(title="Title goes here", x="PC1",y="PC2") +
# I'm making the title in italics because it's usually the name of a species
theme(plot.title = element_text(face = "italic")) #+ scale_color_brewer(palette="Set1")
plot(all_simple.pca)
